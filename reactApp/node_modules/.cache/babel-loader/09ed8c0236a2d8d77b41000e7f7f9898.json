{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/wdmProject/reactApp/src/components/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = () => {\n  _s();\n\n  let history = useHistory();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = \"Invalid email address\";\n      }\n\n      return errors;\n    },\n    onSubmit: async (values, _ref) => {\n      let {\n        setSubmitting\n      } = _ref;\n      console.log(values);\n      const res = await axios.get(`http://127.0.0.1:8000/api/serviceuser-email/${values.email}`);\n\n      if (res.data.status === 200) {\n        localStorage.setItem(\"userRoles\", JSON.stringify([res.data.serviceUser.Role]));\n        history.replace(\"/\");\n        window.location.reload();\n      } else {\n        alert(\"Email or Password not valid\");\n      }\n    },\n    children: _ref2 => {\n      let {\n        isSubmitting\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          type: \"email\",\n          name: \"email\",\n          class: \"input\",\n          placeholder: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"email\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"password\",\n          name: \"password\",\n          class: \"input\",\n          placeholder: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"password\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSubmitting,\n          class: \"btn\",\n          children: \"LOGIN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/wdmProject/reactApp/src/components/LoginForm.js"],"names":["Formik","Form","Field","ErrorMessage","useHistory","_","axios","LoginForm","history","email","password","values","errors","test","setSubmitting","console","log","res","get","data","status","localStorage","setItem","JSON","stringify","serviceUser","Role","replace","window","location","reload","alert","isSubmitting"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,MAAIC,OAAO,GAAGJ,UAAU,EAAxB;AACA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEK,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KADjB;AAEE,IAAA,QAAQ,EAAGC,MAAD,IAAY;AACpB,YAAMC,MAAM,GAAG,EAAf;;AACA,UAAI,CAACD,MAAM,CAACF,KAAZ,EAAmB;AACjBG,QAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACD,OAFD,MAEO,IACL,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,KAAvD,CADI,EAEL;AACAG,QAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACD;;AACD,aAAOG,MAAP;AACD,KAZH;AAaE,IAAA,QAAQ,EAAE,OAAOD,MAAP,WAAqC;AAAA,UAAtB;AAAEG,QAAAA;AAAF,OAAsB;AAC7CC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,YAAMM,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CACf,+CAA8CP,MAAM,CAACF,KAAM,EAD5C,CAAlB;;AAIA,UAAIQ,GAAG,CAACE,IAAJ,CAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,YAAY,CAACC,OAAb,CACE,WADF,EAEEC,IAAI,CAACC,SAAL,CAAe,CAACP,GAAG,CAACE,IAAJ,CAASM,WAAT,CAAqBC,IAAtB,CAAf,CAFF;AAIAlB,QAAAA,OAAO,CAACmB,OAAR,CAAgB,GAAhB;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAPD,MAOO;AACLC,QAAAA,KAAK,CAAC,6BAAD,CAAL;AACD;AACF,KA7BH;AAAA,cA+BG;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,0BACC,QAAC,IAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,IAAI,EAAC,OAAzB;AAAiC,UAAA,KAAK,EAAC,OAAvC;AAA+C,UAAA,WAAW,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,OAAnB;AAA2B,UAAA,SAAS,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,KAAK,EAAC,OAHR;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAHF,eASE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,UAAnB;AAA8B,UAAA,SAAS,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,gBATF,eAUE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,QAAQ,EAAEA,YAAhC;AAA8C,UAAA,KAAK,EAAC,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAAA;AA/BH;AAAA;AAAA;AAAA;AAAA,UADF;AAkDD,CApDD;;GAAMzB,S;UACUH,U;;;KADVG,S;AAsDN,eAAeA,SAAf","sourcesContent":["import { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\n\nconst LoginForm = () => {\n  let history = useHistory();\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\" }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = \"Required\";\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = \"Invalid email address\";\n        }\n        return errors;\n      }}\n      onSubmit={async (values, { setSubmitting }) => {\n        console.log(values);\n        const res = await axios.get(\n          `http://127.0.0.1:8000/api/serviceuser-email/${values.email}`\n        );\n\n        if (res.data.status === 200) {\n          localStorage.setItem(\n            \"userRoles\",\n            JSON.stringify([res.data.serviceUser.Role])\n          );\n          history.replace(\"/\");\n          window.location.reload();\n        } else {\n          alert(\"Email or Password not valid\");\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type=\"email\" name=\"email\" class=\"input\" placeholder=\"email\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <Field\n            type=\"password\"\n            name=\"password\"\n            class=\"input\"\n            placeholder=\"password\"\n          />\n          <ErrorMessage name=\"password\" component=\"div\" />\n          <button type=\"submit\" disabled={isSubmitting} class=\"btn\">\n            LOGIN\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}